{"version":3,"sources":["core.js","Disposable.js","MultiMap.js","Uri.js"],"names":[],"mappings":"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","file":"uri.js","sourcesContent":["'use strict';\n\n/**\n * A collection of core utility functions.\n * @const\n */\nclass core {\n\t/**\n\t * When defining a class Foo with an abstract method bar(), you can do:\n\t * Foo.prototype.bar = core.abstractMethod\n\t *\n\t * Now if a subclass of Foo fails to override bar(), an error will be thrown\n\t * when bar() is invoked.\n\t *\n\t * @type {!Function}\n\t * @throws {Error} when invoked to indicate the method should be overridden.\n\t */\n\tstatic abstractMethod() {\n\t\tthrow Error('Unimplemented abstract method');\n\t}\n\n\t/**\n\t * Loops constructor super classes collecting its properties values. If\n\t * property is not available on the super class `undefined` will be\n\t * collected as value for the class hierarchy position.\n\t * @param {!function()} constructor Class constructor.\n\t * @param {string} propertyName Property name to be collected.\n\t * @return {Array.<*>} Array of collected values.\n\t * TODO(*): Rethink superclass loop.\n\t */\n\tstatic collectSuperClassesProperty(constructor, propertyName) {\n\t\tvar propertyValues = [constructor[propertyName]];\n\t\twhile (constructor.__proto__ && !constructor.__proto__.isPrototypeOf(Function)) {\n\t\t\tconstructor = constructor.__proto__;\n\t\t\tpropertyValues.push(constructor[propertyName]);\n\t\t}\n\t\treturn propertyValues;\n\t}\n\n\t/**\n\t * Gets the name of the given function. If the current browser doesn't\n\t * support the `name` property, this will calculate it from the function's\n\t * content string.\n\t * @param {!function()} fn\n\t * @return {string}\n\t */\n\tstatic getFunctionName(fn) {\n\t\tif (!fn.name) {\n\t\t\tvar str = fn.toString();\n\t\t\tfn.name = str.substring(9, str.indexOf('('));\n\t\t}\n\t\treturn fn.name;\n\t}\n\n\t/**\n\t * Gets an unique id. If `opt_object` argument is passed, the object is\n\t * mutated with an unique id. Consecutive calls with the same object\n\t * reference won't mutate the object again, instead the current object uid\n\t * returns. See {@link core.UID_PROPERTY}.\n\t * @type {opt_object} Optional object to be mutated with the uid. If not\n\t *     specified this method only returns the uid.\n\t * @throws {Error} when invoked to indicate the method should be overridden.\n\t */\n\tstatic getUid(opt_object) {\n\t\tif (opt_object) {\n\t\t\treturn opt_object[core.UID_PROPERTY] ||\n\t\t\t\t(opt_object[core.UID_PROPERTY] = core.uniqueIdCounter_++);\n\t\t}\n\t\treturn core.uniqueIdCounter_++;\n\t}\n\n\t/**\n\t * The identity function. Returns its first argument.\n\t * @param {*=} opt_returnValue The single value that will be returned.\n\t * @return {?} The first argument.\n\t */\n\tstatic identityFunction(opt_returnValue) {\n\t\treturn opt_returnValue;\n\t}\n\n\t/**\n\t * Returns true if the specified value is a boolean.\n\t * @param {?} val Variable to test.\n\t * @return {boolean} Whether variable is boolean.\n\t */\n\tstatic isBoolean(val) {\n\t\treturn typeof val === 'boolean';\n\t}\n\n\t/**\n\t * Returns true if the specified value is not undefined.\n\t * @param {?} val Variable to test.\n\t * @return {boolean} Whether variable is defined.\n\t */\n\tstatic isDef(val) {\n\t\treturn val !== undefined;\n\t}\n\n\t/**\n\t * Returns true if value is not undefined or null.\n\t * @param {*} val\n\t * @return {Boolean}\n\t */\n\tstatic isDefAndNotNull(val) {\n\t\treturn core.isDef(val) && !core.isNull(val);\n\t}\n\n\t/**\n\t * Returns true if value is a document.\n\t * @param {*} val\n\t * @return {Boolean}\n\t */\n\tstatic isDocument(val) {\n\t\treturn val && typeof val === 'object' && val.nodeType === 9;\n\t}\n\n\t/**\n\t * Returns true if value is a dom element.\n\t * @param {*} val\n\t * @return {Boolean}\n\t */\n\tstatic isElement(val) {\n\t\treturn val && typeof val === 'object' && val.nodeType === 1;\n\t}\n\n\t/**\n\t * Returns true if the specified value is a function.\n\t * @param {?} val Variable to test.\n\t * @return {boolean} Whether variable is a function.\n\t */\n\tstatic isFunction(val) {\n\t\treturn typeof val === 'function';\n\t}\n\n\t/**\n\t * Returns true if value is null.\n\t * @param {*} val\n\t * @return {Boolean}\n\t */\n\tstatic isNull(val) {\n\t\treturn val === null;\n\t}\n\n\t/**\n\t * Returns true if the specified value is a number.\n\t * @param {?} val Variable to test.\n\t * @return {boolean} Whether variable is a number.\n\t */\n\tstatic isNumber(val) {\n\t\treturn typeof val === 'number';\n\t}\n\n\t/**\n\t * Returns true if value is a window.\n\t * @param {*} val\n\t * @return {Boolean}\n\t */\n\tstatic isWindow(val) {\n\t\treturn val !== null && val === val.window;\n\t}\n\n\t/**\n\t * Returns true if the specified value is an object. This includes arrays\n\t * and functions.\n\t * @param {?} val Variable to test.\n\t * @return {boolean} Whether variable is an object.\n\t */\n\tstatic isObject(val) {\n\t\tvar type = typeof val;\n\t\treturn type === 'object' && val !== null || type === 'function';\n\t}\n\n\t/**\n\t * Returns true if value is a Promise.\n\t * @param {*} val\n\t * @return {Boolean}\n\t */\n\tstatic isPromise(val) {\n\t\treturn val && typeof val === 'object' && typeof val.then === 'function';\n\t}\n\n\t/**\n\t * Returns true if value is a string.\n\t * @param {*} val\n\t * @return {Boolean}\n\t */\n\tstatic isString(val) {\n\t\treturn typeof val === 'string';\n\t}\n\n\t/**\n\t * Merges the values of a static property a class with the values of that\n\t * property for all its super classes, and stores it as a new static\n\t * property of that class. If the static property already existed, it won't\n\t * be recalculated.\n\t * @param {!function()} constructor Class constructor.\n\t * @param {string} propertyName Property name to be collected.\n\t * @param {function(*, *):*=} opt_mergeFn Function that receives an array filled\n\t *   with the values of the property for the current class and all its super classes.\n\t *   Should return the merged value to be stored on the current class.\n\t * @return {boolean} Returns true if merge happens, false otherwise.\n\t */\n\tstatic mergeSuperClassesProperty(constructor, propertyName, opt_mergeFn) {\n\t\tvar mergedName = propertyName + '_MERGED';\n\t\tif (constructor.hasOwnProperty(mergedName)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar merged = core.collectSuperClassesProperty(constructor, propertyName);\n\t\tif (opt_mergeFn) {\n\t\t\tmerged = opt_mergeFn(merged);\n\t\t}\n\t\tconstructor[mergedName] = merged;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Null function used for default values of callbacks, etc.\n\t * @return {void} Nothing.\n\t */\n\tstatic nullFunction() {}\n}\n\n/**\n * Unique id property prefix.\n * @type {String}\n * @protected\n */\ncore.UID_PROPERTY = 'core_' + ((Math.random() * 1e9) >>> 0);\n\n/**\n * Counter for unique id.\n * @type {Number}\n * @private\n */\ncore.uniqueIdCounter_ = 1;\n\nexport default core;\n","'use strict';\n\n/**\n * Disposable utility. When inherited provides the `dispose` function to its\n * subclass, which is responsible for disposing of any object references\n * when an instance won't be used anymore. Subclasses should override\n * `disposeInternal` to implement any specific disposing logic.\n * @constructor\n */\nclass Disposable {\n\tconstructor() {\n\t\t/**\n\t\t * Flag indicating if this instance has already been disposed.\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.disposed_ = false;\n\t}\n\n\t/**\n\t * Disposes of this instance's object references. Calls `disposeInternal`.\n\t */\n\tdispose() {\n\t\tif (!this.disposed_) {\n\t\t\tthis.disposeInternal();\n\t\t\tthis.disposed_ = true;\n\t\t}\n\t}\n\n\t/**\n\t * Subclasses should override this method to implement any specific\n\t * disposing logic (like clearing references and calling `dispose` on other\n\t * disposables).\n\t */\n\tdisposeInternal() {}\n\n\t/**\n\t * Checks if this instance has already been disposed.\n\t * @return {boolean}\n\t */\n\tisDisposed() {\n\t\treturn this.disposed_;\n\t}\n}\n\nexport default Disposable;\n","'use strict';\n\nimport Disposable from 'metal/src/disposable/Disposable';\n\n/**\n * Case insensitive string Multimap implementation. Allows multiple values for\n * the same key name.\n * @extends {Disposable}\n */\nclass MultiMap extends Disposable {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.keys = {};\n\t\tthis.values = {};\n\t}\n\n\t/**\n\t * Adds value to a key name.\n\t * @param {string} name\n\t * @param {*} value\n\t * @chainable\n\t */\n\tadd(name, value) {\n\t\tthis.keys[name.toLowerCase()] = name;\n\t\tthis.values[name.toLowerCase()] = this.values[name.toLowerCase()] || [];\n\t\tthis.values[name.toLowerCase()].push(value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clears map names and values.\n\t * @chainable\n\t */\n\tclear() {\n\t\tthis.keys = {};\n\t\tthis.values = {};\n\t\treturn this;\n\t}\n\n\t/**\n\t * Checks if map contains a value to the key name.\n\t * @param {string} name\n\t * @return {boolean}\n\t * @chainable\n\t */\n\tcontains(name) {\n\t\treturn name.toLowerCase() in this.values;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.values = null;\n\t}\n\n\t/**\n\t * Gets the first added value from a key name.\n\t * @param {string} name\n\t * @return {*}\n\t * @chainable\n\t */\n\tget(name) {\n\t\tvar values = this.values[name.toLowerCase()];\n\t\tif (values) {\n\t\t\treturn values[0];\n\t\t}\n\t}\n\n\t/**\n\t * Gets all values from a key name.\n\t * @param {string} name\n\t * @return {Array.<*>}\n\t */\n\tgetAll(name) {\n\t\treturn this.values[name.toLowerCase()];\n\t}\n\n\t/**\n\t * Returns true if the map is empty, false otherwise.\n\t * @return {boolean}\n\t */\n\tisEmpty() {\n\t\treturn this.size() === 0;\n\t}\n\n\t/**\n\t * Gets array of key names.\n\t * @return {Array.<string>}\n\t */\n\tnames() {\n\t\treturn Object.keys(this.values).map((key) => this.keys[key]);\n\t}\n\n\t/**\n\t * Removes all values from a key name.\n\t * @param {string} name\n\t * @chainable\n\t */\n\tremove(name) {\n\t\tdelete this.keys[name.toLowerCase()];\n\t\tdelete this.values[name.toLowerCase()];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value of a key name. Relevant to replace the current values with\n\t * a new one.\n\t * @param {string} name\n\t * @param {*} value\n\t * @chainable\n\t */\n\tset(name, value) {\n\t\tthis.keys[name.toLowerCase()] = name;\n\t\tthis.values[name.toLowerCase()] = [value];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets the size of the map key names.\n\t * @return {number}\n\t */\n\tsize() {\n\t\treturn this.names().length;\n\t}\n\n\t/**\n\t * Returns the parsed values as a string.\n\t * @return {string}\n\t */\n\ttoString() {\n\t\treturn JSON.stringify(this.values);\n\t}\n}\n\nexport default MultiMap;\n","'use strict';\n\nimport core from 'metal/src/core';\nimport MultiMap from 'metal-multimap/src/MultiMap';\n\nclass Uri {\n\n\t/**\n\t * This class contains setters and getters for the parts of the URI.\n\t * The following figure displays an example URIs and their component parts.\n\t *\n\t *                                              path\n\t *\t                                         ┌───┴────┐\n\t *\t  abc://username:password@example.com:123/path/data?key=value#fragid1\n\t *\t  └┬┘   └───────┬───────┘ └────┬────┘ └┬┘           └───┬───┘ └──┬──┘\n\t * protocol  user information   hostname  port            search    hash\n\t *                            └──────┬───────┘\n\t *                                  host\n\t *                                  \n\t * @param {*=} opt_uri Optional string URI to parse\n\t * @constructor\n\t */\n\tconstructor(opt_uri = '') {\n\t\tthis.url = new URL(this.maybeAddProtocolAndHostname_(opt_uri));\n\t}\n\n\t/**\n\t * Adds the value of the named query parameters.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value. Will be explicitly casted to String.\n\t * @chainable\n\t */\n\taddParameterValue(name, value) {\n\t\tthis.ensureQueryInitialized_();\n\t\tif (core.isDef(value)) {\n\t\t\tvalue = String(value);\n\t\t}\n\t\tthis.query.add(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the values of the named query parameter.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\taddParameterValues(name, values) {\n\t\tvalues.forEach((value) => this.addParameterValue(name, value));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Ensures query internal map is initialized and synced with initial value\n\t * extracted from URI search part.\n\t * @protected\n\t */\n\tensureQueryInitialized_() {\n\t\tif (this.query) {\n\t\t\treturn;\n\t\t}\n\t\tthis.query = new MultiMap();\n\t\tvar search = this.url.search;\n\t\tif (search) {\n\t\t\tsearch.substring(1).split('&').forEach((param) => {\n\t\t\t\tvar [key, value] = param.split('=');\n\t\t\t\tif (core.isDef(value)) {\n\t\t\t\t\tvalue = decodeURIComponent(value);\n\t\t\t\t}\n\t\t\t\tthis.addParameterValue(key, value);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Gets the hash part of uri.\n\t * @return {string}\n\t */\n\tgetHash() {\n\t\treturn this.url.hash;\n\t}\n\n\t/**\n\t * Gets the host part of uri. E.g. <code>[hostname]:[port]</code>.\n\t * @return {string}\n\t */\n\tgetHost() {\n\t\tvar host = this.getHostname();\n\t\tif (host) {\n\t\t\tvar port = this.getPort();\n\t\t\tif (port) {\n\t\t\t\thost += ':' + port;\n\t\t\t}\n\t\t}\n\t\treturn host;\n\t}\n\n\t/**\n\t * Gets the hostname part of uri without protocol and port.\n\t * @return {string}\n\t */\n\tgetHostname() {\n\t\tvar hostname = this.url.hostname;\n\t\tif (hostname === Uri.HOSTNAME_PLACEHOLDER) {\n\t\t\treturn '';\n\t\t}\n\t\treturn hostname;\n\t}\n\n\t/**\n\t * Gets the origin part of uri. E.g. <code>http://[hostname]:[port]</code>.\n\t * @return {string}\n\t */\n\tgetOrigin() {\n\t\tvar host = this.getHost();\n\t\tif (host) {\n\t\t\treturn this.getProtocol() + '//' + host;\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * Returns the first value for a given parameter or undefined if the given\n\t * parameter name does not appear in the query string.\n\t * @param {string} paramName Unescaped parameter name.\n\t * @return {string|undefined} The first value for a given parameter or\n\t *   undefined if the given parameter name does not appear in the query\n\t *   string.\n\t */\n\tgetParameterValue(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.get(name);\n\t}\n\n\t/**\n\t * Returns the value<b>s</b> for a given parameter as a list of decoded\n\t * query parameter values.\n\t * @param {string} name The parameter to get values for.\n\t * @return {!Array<?>} The values for a given parameter as a list of decoded\n\t *   query parameter values.\n\t */\n\tgetParameterValues(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.getAll(name);\n\t}\n\n\t/**\n\t * Returns the name<b>s</b> of the parameters.\n\t * @return {!Array<string>} The names for the parameters as a list of\n\t *   strings.\n\t */\n\tgetParameterNames() {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.names();\n\t}\n\n\t/**\n\t * Gets the password part of uri.\n\t * @return {string}\n\t */\n\tgetPassword() {\n\t\treturn this.url.password;\n\t}\n\n\t/**\n\t * Gets the pathname part of uri.\n\t * @return {string}\n\t */\n\tgetPathname() {\n\t\treturn this.url.pathname;\n\t}\n\n\t/**\n\t * Gets the port number part of uri as string.\n\t * @return {string}\n\t */\n\tgetPort() {\n\t\treturn this.url.port;\n\t}\n\n\t/**\n\t * Gets the protocol part of uri. E.g. <code>http:</code>.\n\t * @return {string}\n\t */\n\tgetProtocol() {\n\t\treturn this.url.protocol;\n\t}\n\n\t/**\n\t * Gets the search part of uri. Search value is retrieved from query\n\t * parameters.\n\t * @return {string}\n\t */\n\tgetSearch() {\n\t\tvar search = '';\n\t\tvar querystring = '';\n\t\tthis.getParameterNames().forEach((name) => {\n\t\t\tthis.getParameterValues(name).forEach((value) => {\n\t\t\t\tquerystring += name;\n\t\t\t\tif (core.isDef(value)) {\n\t\t\t\t\tquerystring += '=' + encodeURIComponent(value);\n\t\t\t\t}\n\t\t\t\tquerystring += '&';\n\t\t\t});\n\t\t});\n\t\tquerystring = querystring.slice(0, -1);\n\t\tif (querystring) {\n\t\t\tsearch += '?' + querystring;\n\t\t}\n\t\treturn search;\n\t}\n\n\t/**\n\t * Gets the username part of uri.\n\t * @return {string}\n\t */\n\tgetUsername() {\n\t\treturn this.url.username;\n\t}\n\n\t/**\n\t * Maybe adds protocol and a hostname placeholder on a parial URI if needed.\n\t * Relevent for compatibility with <code>URL</code> native object.\n\t * @param {string=} opt_uri\n\t * @return {string} URI with protocol and hostname placeholder.\n\t */\n\tmaybeAddProtocolAndHostname_(opt_uri) {\n\t\tvar url = opt_uri;\n\t\tif (opt_uri.indexOf('://') === -1) {\n\t\t\turl = Uri.DEFAULT_PROTOCOL + '//';\n\n\t\t\tswitch (opt_uri.charAt(0)) {\n\t\t\t\tcase '.':\n\t\t\t\tcase '?':\n\t\t\t\tcase '#':\n\t\t\t\t\turl += Uri.HOSTNAME_PLACEHOLDER;\n\t\t\t\t\turl += '/';\n\t\t\t\t\turl += opt_uri;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '':\n\t\t\t\tcase '/':\n\t\t\t\t\turl += Uri.HOSTNAME_PLACEHOLDER;\n\t\t\t\t\turl += opt_uri;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\turl += opt_uri;\n\t\t\t}\n\t\t}\n\t\treturn url;\n\t}\n\n\t/**\n\t * Removes the named query parameter.\n\t * @param {string} name The parameter to remove.\n\t * @chainable\n\t */\n\tremoveParameter(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\tthis.query.remove(name);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the hash.\n\t * @param {string} hash\n\t * @chainable\n\t */\n\tsetHash(hash) {\n\t\tthis.url.hash = hash;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the hostname.\n\t * @param {string} hostname\n\t * @chainable\n\t */\n\tsetHostname(hostname) {\n\t\tthis.url.hostname = hostname;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value of the named query parameters, clearing previous values\n\t * for that key.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\tsetParameterValue(name, value) {\n\t\tthis.removeParameter(name);\n\t\tthis.addParameterValue(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the values of the named query parameters, clearing previous values\n\t * for that key.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\tsetParameterValues(name, values) {\n\t\tthis.removeParameter(name);\n\t\tvalues.forEach((value) => this.addParameterValue(name, value));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the password.\n\t * @param {string} password\n\t * @chainable\n\t */\n\tsetPassword(password) {\n\t\tthis.url.password = password;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the pathname.\n\t * @param {string} pathname\n\t * @chainable\n\t */\n\tsetPathname(pathname) {\n\t\tthis.url.pathname = pathname;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the port number.\n\t * @param {*} port Port number.\n\t * @chainable\n\t */\n\tsetPort(port) {\n\t\tthis.url.port = port;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the protocol. If missing <code>http:</code> is used as default.\n\t * @param {string} protocol\n\t * @chainable\n\t */\n\tsetProtocol(protocol) {\n\t\tthis.url.protocol = protocol;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the username.\n\t * @param {string} username\n\t * @chainable\n\t */\n\tsetUsername(username) {\n\t\tthis.url.username = username;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @return {string} The string form of the url.\n\t * @override\n\t */\n\ttoString() {\n\t\tvar href = '';\n\t\tvar host = this.getHost();\n\t\tif (host) {\n\t\t\thref += this.getProtocol() + '//';\n\t\t\tvar username = this.getUsername();\n\t\t\tvar password = this.getPassword();\n\t\t\tif (username && password) {\n\t\t\t\thref += username + ':' + password + '@';\n\t\t\t}\n\t\t}\n\t\thref += host + this.getPathname() + this.getSearch() + this.getHash();\n\t\treturn href;\n\t}\n\n}\n\n/**\n * Default protocol value.\n * @type {String}\n * @default http:\n * @static\n */\nUri.DEFAULT_PROTOCOL = 'http:';\n\n/**\n * Hostname placeholder. Relevant to internal usage only.\n * @type {String}\n * @static\n */\nUri.HOSTNAME_PLACEHOLDER = 'hostname' + Date.now();\n\nexport default Uri;\n"],"sourceRoot":"/source/"}